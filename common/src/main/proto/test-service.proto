syntax = "proto3";

package test;

import "common.proto";
import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "com.nitb.testservice.grpc";
option java_outer_classname = "TestProto";

//Tests
message CreateTestRequest {
  string user_id = 1;
  string name = 2;
  int32 minutes = 3;
  string topic = 4;
}

message CreateTestResponse {
  string id = 1;
  string created_by = 2;
  string create_at = 3;
  string name = 4;
  int32 minutes = 5;
  string topic = 6;
}

message GetTestByIdRequest {
  string id = 1;
}

message TestDetailResponse {
  string id = 1;
  string created_by = 2;
  string create_at = 3;
  string name = 4;
  int32 version = 5;
  int32 minutes = 6;
  string topic = 7;
  int32 part_count = 8;
  int32 question_count = 9;
  int64 completed_users = 10;
  string updated_by = 11;
  string update_at = 12;
  bool is_deleted = 13;
}

message TestNameResponse {
  string name = 1;
}

message GetTestsRequest {
  int32 page = 1;
  int32 size = 2;
}

message TestSummaryResponse {
  string id = 1;
  string name = 2;
  int32 version = 3;
  int32 question_count = 4;
  int32 minutes = 5;
  string topic = 6;
}

message TestsPaginationResponse {
  repeated TestSummaryResponse tests = 1;
  int64 total_items = 2;
  int32 total_pages = 3;
}

message GetDeletedTestsRequest {
  int32 page = 1;
  int32 size = 2;
}

message SearchTestByNameRequest {
  string keyword = 1;
  int32 page = 2;
  int32 size = 3;
}

message SearchDeletedTestByNameRequest {
  string keyword = 1;
  int32 page = 2;
  int32 size = 3;
}

message ValidateUpdateTestRequest {
  string id = 1;
}

message UpdateTestNameAndTopicRequest {
  string id = 1;
  string user_id = 2;
  string name = 3;
  string topic = 4;
}

message UpdateTestRequest {
  string oldId = 1;
  string newId = 2;
}

message UpdateTestResponse {
  string id = 1;
  string updated_by = 2;
  string update_at = 3;
  string name = 4;
  int32 version = 5;
  int32 minutes = 6;
  string topic = 7;
}

message DeleteTestRequest {
  string id = 1;
  string user_id = 2;
}

message DeleteTestResponse {
  string id = 1;
  string updated_by = 2;
  string update_at = 3;
  bool is_deleted = 4;
}

message RestoreTestRequest {
  string id = 1;
  string user_id = 2;
}

message GetPublishedTestStatisticsRequest {
  string user_id = 1;
  string from = 2;
  string to = 3;
  common.GroupBy group_by = 4;
}

message TestStatistic {
  string time = 1;
  int32 test_count = 2;
  int64 completed_users = 3;
}

message GetPublishedTestStatisticsResponse {
  repeated TestStatistic statistics = 1;
}

message TestTemplateResponse {
  string file_name = 1;
  bytes file_content = 2;
}

message UploadTestTemplateRequest {
  string user_id = 1;
  bytes file_content = 2;
}

//Parts
message CreateQuestionRequest {
  string content = 1;
  string answers = 2;
  string correct_answer = 3;
  string explanation = 4;
}

message CreatePartRequest {
  string content = 1;
  repeated CreateQuestionRequest questions = 2;
}

message CreatePartsRequest {
  string test_id = 1;
  string user_id = 2;
  repeated CreatePartRequest parts = 3;
}

message GetAllPartsForTestRequest {
  string test_id = 1;
}

message QuestionResponse {
  string id = 1;
  int32 position = 2;
  string content = 3;
  string answers = 4;
}

message PartResponse {
  string id = 1;
  int32 position = 2;
  string content = 3;
  int32 question_count = 4;
  repeated QuestionResponse questions = 5;
}

message PartsResponse {
  repeated PartResponse parts = 1;
}

//Questions
message GetQuestionByIdRequest {
  string id = 1;
}

message QuestionDetailResponse {
  string id = 1;
  int32 position = 2;
  string content = 3;
  string answers = 4;
  string correct_answer = 5;
  string explanation = 6;
  string part_content = 7;
}

message GetQuestionAnswersRequest {
  string test_id = 1;
}

message AnswerResponse {
  string questionId = 1;
  string correctAnswer = 2;
}

message QuestionAnswersResponse {
  map<string, string> answers = 1;
}

message GetQuestionPositionsRequest {
  string test_id = 1;
}

message QuestionPositionsResponse {
  map<string, int32> positions = 1;
}

//Comments
message PostCommentRequest {
  string user_id = 1;
  string test_id = 2;
  string content = 3;
}

message CommentResponse {
  string id = 1;
  string create_at = 2;
  string content = 3;
}

message ReplyCommentRequest {
  string parent_id = 1;
  string user_id = 2;
  string content = 3;
}

message GetCommentsRequest {
  string test_id = 1;
  int32 page = 2;
  int32 size = 3;
}

message CommentThreadResponse {
  string id = 1;
  string user_id = 2;
  string create_at = 3;
  string content = 4;
  repeated CommentThreadResponse replies = 5;
}

message CommentsResponse {
  repeated CommentThreadResponse comments = 1;
  int64 totalItems = 2;
  int32 totalPages = 3;
}

service TestService {
  //Tests
  rpc CreateTest(CreateTestRequest) returns (CreateTestResponse);
  rpc GetTestById(GetTestByIdRequest) returns (TestDetailResponse);
  rpc GetTestNameById(GetTestByIdRequest) returns(TestNameResponse);
  rpc GetTests(GetTestsRequest) returns (TestsPaginationResponse);
  rpc GetDeletedTests(GetDeletedTestsRequest) returns (TestsPaginationResponse);
  rpc SearchTestByName(SearchTestByNameRequest) returns (TestsPaginationResponse);
  rpc SearchDeletedTestByName(SearchDeletedTestByNameRequest) returns (TestsPaginationResponse);
  rpc ValidateUpdateTest(ValidateUpdateTestRequest) returns (google.protobuf.Empty);
  rpc UpdateTestNameAndTopic(UpdateTestNameAndTopicRequest) returns (UpdateTestResponse);
  rpc UpdateTest(UpdateTestRequest) returns (UpdateTestResponse);
  rpc DeleteTest(DeleteTestRequest) returns (DeleteTestResponse);
  rpc RestoreTest(RestoreTestRequest) returns (DeleteTestResponse);
  rpc GetPublishedTestStatistics(GetPublishedTestStatisticsRequest) returns (GetPublishedTestStatisticsResponse);

  //Test file
  rpc GenerateTestTemplate(google.protobuf.Empty) returns (TestTemplateResponse);
  rpc UploadTestTemplate(UploadTestTemplateRequest) returns (CreateTestResponse);

  //Parts
  rpc CreateParts(CreatePartsRequest) returns (google.protobuf.Empty);
  rpc GetAllPartsForTest(GetAllPartsForTestRequest) returns (PartsResponse);

  //Questions
  rpc GetQuestionById(GetQuestionByIdRequest) returns (QuestionDetailResponse);
  rpc GetQuestionAnswers(GetQuestionAnswersRequest) returns (QuestionAnswersResponse);
  rpc GetQuestionPositions(GetQuestionPositionsRequest) returns (QuestionPositionsResponse);

  //Comments
  rpc PostComment(PostCommentRequest) returns (CommentResponse);
  rpc ReplyComment(ReplyCommentRequest) returns (CommentResponse);
  rpc GetComments(GetCommentsRequest) returns (CommentsResponse);
}
